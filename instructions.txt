This is a demo of my final project - a Connect Four solver algorithm written in Java.

It is based on the Minimax algorithm, but with a few modifications to make it more efficient across different board configurations:

1. It uses alpha-beta pruning to prune the search tree as soon as we know that the score of the position is greater than beta.
2. It uses a bitmap encoding of positions to reduce significantly the computation time.
3. It uses a transposition table by caching the outcome of previous computation to avoid recomputation.

When the algorithm is finished, it will print out the best score and the best move it found. It will also print out the time it took to compute the best move.

If you find any issues or have any suggestions, please let me know.

Thanks for reading!
——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

Inputs:
- a string of the current board configuration (for example, "1234567" to cover the bottom row). Note that as the algorithm has an exponential complexity, it is not suitable for predicting the best move for a position with less than 10 pieces.
- a boolean indicating whether the user wants to use a weak or strong heuristic: the program defaults to the strong heuristic.

Output: The score of the current board configuration, as well as the best move to play for the current player.
